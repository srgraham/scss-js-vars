// Generated by CoffeeScript 1.12.6
(function() {
  var _, gonzales;

  gonzales = require('gonzales-pe');

  _ = require('lodash');

  module.exports.getVariables = function(scss) {
    var ast, indent, options, printTree, reduceNode, reduceValue, variables;
    options = {
      syntax: 'scss'
    };
    indent = function(depth) {
      return _.repeat('  ', depth);
    };
    variables = {};
    ast = gonzales.parse(scss, options);
    printTree = function(node, depth) {
      var line_index, lines, text;
      if (depth == null) {
        depth = 0;
      }
      lines = [];
      text = _.upperFirst(node.type);
      if (!text) {
        text = JSON.stringify(node);
      }
      lines.push(indent(depth) + text);
      line_index = lines.length - 1;
      if (_.isArray(node.content)) {
        _.each(node.content, function(child_node) {
          if (_.isObject(child_node)) {
            lines.push(printTree(child_node, depth + 1));
          }
        });
      } else {
        lines[line_index] += " " + (JSON.stringify(node.content));
      }
      return lines.join('\n');
    };
    reduceValue = function(nodes) {
      var colon_indices, comma_indices, i, j, k, l, left_value, len, list_value, list_value_end_index, list_value_start_index, node, nodes_list_value, nodes_obj_name, nodes_obj_value, obj_name, obj_name_node_end_index, obj_name_node_start_index, obj_value, obj_value_node_end_index, obj_value_node_start_index, operator, out, ref, ref1, right_value;
      if (nodes.length === 1) {
        return reduceNode(nodes[0]);
      }
      colon_indices = [];
      comma_indices = [];
      _.each(nodes, function(child, i) {
        if (!child.is('operator')) {
          return;
        }
        if (child.content === ':') {
          colon_indices.push(i);
        }
        if (child.content === ',') {
          comma_indices.push(i);
        }
      });
      if (colon_indices.length > 0) {
        out = {};
        comma_indices.push(nodes.length + 1);
        for (i = j = 0, ref = colon_indices.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          obj_name_node_start_index = 0;
          if (i > 0) {
            obj_name_node_start_index = comma_indices[i - 1] + 1;
          }
          obj_name_node_end_index = colon_indices[i] - 1;
          obj_value_node_start_index = colon_indices[i] + 1;
          obj_value_node_end_index = comma_indices[i] - 1;
          nodes_obj_name = nodes.slice(obj_name_node_start_index, obj_name_node_end_index + 1);
          nodes_obj_value = nodes.slice(obj_value_node_start_index, obj_value_node_end_index + 1);
          obj_name = reduceValue(nodes_obj_name);
          obj_value = reduceValue(nodes_obj_value);
          out[obj_name] = obj_value;
        }
        return out;
      }
      if (comma_indices.length > 0) {
        out = [];
        comma_indices.push(nodes.length + 1);
        for (i = k = 0, ref1 = comma_indices.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
          list_value_start_index = 0;
          if (i > 0) {
            list_value_start_index = comma_indices[i - 1] + 1;
          }
          list_value_end_index = comma_indices[i] - 1;
          nodes_list_value = nodes.slice(list_value_start_index, list_value_end_index);
          list_value = reduceValue(nodes_list_value);
          out.push(list_value);
        }
        return out;
      }
      left_value = null;
      operator = null;
      for (l = 0, len = nodes.length; l < len; l++) {
        node = nodes[l];
        if (node.is('operator')) {
          operator = node.content;
          continue;
        }
        if (node.is('space')) {
          continue;
        }
        right_value = reduceNode(node);
        if (!left_value) {
          left_value = right_value;
          right_value = null;
          continue;
        }
        switch (operator) {
          case '+':
            left_value = left_value + right_value;
            break;
          case '-':
            left_value = left_value - right_value;
            break;
          case '*':
            left_value = left_value * right_value;
            break;
          case '/':
            left_value = left_value / right_value;
        }
        operator = null;
        right_value = null;
      }
      return left_value;
    };
    reduceNode = function(node) {
      var var_name;
      if (node.is('number')) {
        return +node.content;
      }
      if (node.is('string')) {
        return node.content.toString().slice(1, -1);
      }
      if (node.is('variable')) {
        var_name = node.first('ident');
        return variables[var_name];
      }
      if (node.is('parentheses')) {
        return reduceValue(node.content);
      }
      throw new Error("unhandled reduceNode(" + node.type + ")", JSON.stringify(node));
    };
    ast.traverseByType('declaration', function(node_declaration, index, parent) {
      var node_property, node_value, var_name, var_value;
      var_name = null;
      var_value = null;
      node_property = node_declaration.first('property');
      var_name = node_property.first('variable').first('ident').content;
      node_value = node_declaration.first('value');
      var_value = reduceValue(node_value.content);
      variables[var_name] = var_value;
    });
    return variables;
  };

}).call(this);

//# sourceMappingURL=index.js.map
